#!/bin/bash

VERSION="1.4.0"
ACCOUNTS_DIR="$HOME/.asterisk"
SETTINGS_FILE="$ACCOUNTS_DIR/settings.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
ORANGE='\033[38;2;230;125;34m'  # #E67D22
WHITE='\033[1;37m'  # Bright white
NC='\033[0m' # No Color

# Function to get terminal width
get_terminal_width() {
    tput cols
}

# Function to repeat a character N times
repeat_char() {
    local char="$1"
    local count="$2"
    printf '%*s' "$count" | tr ' ' "$char"
}

# Function to draw top border
draw_top_border() {
    local width=$(get_terminal_width)
    local title="$1"
    # Strip ANSI codes to get actual visible length
    local visible_title=$(strip_ansi "$title")
    local title_length=${#visible_title}
    # Width = "╭─── " (5) + title + " " (1) + dashes + "╮" (1)
    local remaining=$((width - title_length - 7))  # 7 = 5 + 1 + 1
    printf "${ORANGE}╭─── ${NC}"
    printf "%b" "$title"
    printf "${ORANGE} "
    repeat_char "─" "$remaining"
    printf "╮${NC}\n"
}

# Function to draw bottom border
draw_bottom_border() {
    local width=$(get_terminal_width)
    local subtitle="$1"
    local subtitle_length=${#subtitle}
    # Width = "╰─── " (5) + subtitle + " " (1) + dashes + "╯" (1)
    local remaining=$((width - subtitle_length - 7))  # 7 = 5 + 1 + 1
    printf "${ORANGE}╰─── ${NC}"
    printf "%s" "$subtitle"
    printf "${ORANGE} "
    repeat_char "─" "$remaining"
    printf "╯${NC}\n"
}

# Function to strip ANSI codes for length calculation
strip_ansi() {
    local text="$1"
    # Remove all ANSI escape sequences using sed
    echo "$text" | sed -E 's/\\033\[[0-9;]+m//g'
}

# Function to draw a padded line with borders
draw_line() {
    local content="$1"
    local width=$(get_terminal_width)
    # Strip ANSI codes to get actual visible length
    local visible_content=$(strip_ansi "$content")
    local content_length=${#visible_content}
    # Width breakdown: │ (1) + "  " (2) + content + padding + "  " (2) + │ (1) = width
    # So: padding = width - 1 - 2 - content_length - 2 - 1 = width - content_length - 6
    local padding=$((width - content_length - 6))
    printf "${ORANGE}│${NC}  %b%-*s  ${ORANGE}│${NC}\n" "$content" "$padding" ""
}

# Function to draw empty line with borders
draw_empty_line() {
    local width=$(get_terminal_width)
    local remaining=$((width - 2))  # 2 = "│" + "│"
    printf "${ORANGE}│${NC}"
    printf '%*s' "$remaining" ""
    printf "${ORANGE}│${NC}\n"
}

# Function to create initial setup
setup_accounts_dir() {
    echo "Setting up Asterisk's config directory, $ACCOUNTS_DIR..."
    mkdir -p "$ACCOUNTS_DIR"
    
    # Create default settings.json
    cat > "$SETTINGS_FILE" << 'EOF'
{
  "defaultAccountName": "Personal",
  "additionalAccounts": [
    "Work",
    "Other"
  ]
}
EOF
    
    echo "Created $ACCOUNTS_DIR directory and settings.json"
    echo "Edit the settings.json file to configure account profiles for your Claude Code accounts."
}

# Function to migrate old settings format to new format
migrate_settings_if_needed() {
    # Check if migration is needed (old format has "accounts" instead of "additionalAccounts")
    if grep -q '"accounts"' "$SETTINGS_FILE" && ! grep -q '"additionalAccounts"' "$SETTINGS_FILE"; then
        echo "Migrating settings.json to new format..."

        if command -v jq > /dev/null 2>&1; then
            # Use jq for migration
            local temp_file="${SETTINGS_FILE}.tmp"
            jq '{defaultAccountName: "Personal", additionalAccounts: .accounts}' "$SETTINGS_FILE" > "$temp_file"
            mv "$temp_file" "$SETTINGS_FILE"
        else
            # Fallback: manual migration using sed
            local temp_file="${SETTINGS_FILE}.tmp"
            sed 's/"accounts"/"additionalAccounts"/' "$SETTINGS_FILE" | \
            sed 's/{/{\'$'\n''  "defaultAccountName": "Personal",/' > "$temp_file"
            mv "$temp_file" "$SETTINGS_FILE"
        fi

        echo "Settings migrated successfully."
    fi
}

# Function to get default account name
get_default_account_name() {
    if command -v jq > /dev/null 2>&1; then
        jq -r '.defaultAccountName // "Personal"' "$SETTINGS_FILE" 2>/dev/null
    else
        # Fallback without jq - basic parsing
        local default=$(grep -o '"defaultAccountName"[[:space:]]*:[[:space:]]*"[^"]*"' "$SETTINGS_FILE" | sed 's/.*"defaultAccountName"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
        if [ -z "$default" ]; then
            echo "Personal"
        else
            echo "$default"
        fi
    fi
}

# Function to parse JSON and get additional account names
get_account_names() {
    if command -v jq > /dev/null 2>&1; then
        jq -r '.additionalAccounts[]? // .accounts[]?' "$SETTINGS_FILE" 2>/dev/null
    else
        # Fallback without jq - basic parsing (supports both new and old format)
        grep -o '"[^"]*"' "$SETTINGS_FILE" | grep -v -e '"defaultAccountName"' -e '"additionalAccounts"' -e '"accounts"' | sed 's/"//g'
    fi
}

# Function to compare semantic versions (returns 0 if v1 > v2, 1 otherwise)
version_gt() {
    local v1="$1"
    local v2="$2"

    # Split versions into arrays
    IFS='.' read -ra V1 <<< "$v1"
    IFS='.' read -ra V2 <<< "$v2"

    # Compare major, minor, patch
    for i in 0 1 2; do
        local num1=${V1[$i]:-0}
        local num2=${V2[$i]:-0}

        if [ "$num1" -gt "$num2" ]; then
            return 0  # v1 > v2
        elif [ "$num1" -lt "$num2" ]; then
            return 1  # v1 < v2
        fi
    done

    return 1  # versions are equal
}

# Function to check for updates
check_for_updates() {
    local remote_version=$(curl -fsSL "https://raw.githubusercontent.com/juddflamm/asterisk/main/version.txt" 2>/dev/null | tr -d '[:space:]')
    if [ -n "$remote_version" ] && [ "$remote_version" != "$VERSION" ]; then
        # Compare versions using proper semantic versioning
        if version_gt "$remote_version" "$VERSION"; then
            echo "$remote_version"
        fi
    fi
}

# Function to show MCP tools installation menu
show_mcp_menu() {
    draw_top_border "${ORANGE}*${NC} ${WHITE}Asterisk${NC} v${VERSION}"
    draw_empty_line
    draw_line "${WHITE}MCP Tools Management${NC}"
    draw_line "${WHITE}==============================================${NC}"
    draw_empty_line
    draw_line "${WHITE}Install MCP Tools:${NC}"
    draw_line "1) Playwright MCP Tool"
    draw_line "2) Atlassian MCP Tool"
    draw_empty_line
    draw_line "${WHITE}Manage MCP Tools:${NC}"
    draw_line "r) Remove MCP Tool from a profile"
    draw_empty_line
    draw_line "b) Back to main menu"
    draw_empty_line
    draw_bottom_border "Written By Claude Code For Claude Code"
    printf " Press a key (1-2, r, b, ESC): "
    read -n1 -s tool_choice
    echo # Add newline after input

    # Handle ESC or back option
    if [[ "$tool_choice" = $'\x1b' ]] || [[ "$tool_choice" = "B" || "$tool_choice" = "b" ]]; then
        clear
        show_menu "$@"
        return
    fi

    # Handle remove option
    if [[ "$tool_choice" = "R" || "$tool_choice" = "r" ]]; then
        clear
        show_profile_selection_for_mcp_removal "$@"
        return
    fi

    # Validate tool selection
    local mcp_tool=""
    local mcp_command=""

    if [[ "$tool_choice" = "1" || "$tool_choice" = "P" || "$tool_choice" = "p" ]]; then
        mcp_tool="Playwright MCP Tool"
        mcp_command="playwright npx @playwright/mcp@latest"
    elif [[ "$tool_choice" = "2" || "$tool_choice" = "A" || "$tool_choice" = "a" ]]; then
        mcp_tool="Atlassian MCP Tool"
        mcp_command="--transport sse atlassian https://mcp.atlassian.com/v1/sse"
    else
        echo "Invalid selection. Please try again."
        sleep 2
        clear
        show_mcp_menu "$@"
        return
    fi

    # Now show profile selection
    clear
    show_profile_selection_for_mcp "$mcp_tool" "$mcp_command" "$@"
}

# Function to show profile selection for MCP installation
show_profile_selection_for_mcp() {
    local mcp_tool="$1"
    local mcp_command="$2"
    shift 2

    draw_top_border "${ORANGE}*${NC} ${WHITE}Asterisk${NC} v${VERSION}"
    draw_empty_line
    draw_line "${WHITE}Select Profile for $mcp_tool${NC}"
    draw_line "${WHITE}==============================================${NC}"
    draw_empty_line

    local default_account=$(get_default_account_name)
    local accounts=($(get_account_names))
    local menu_options=()
    local i=1

    # Add default account option first
    draw_line "$i) $default_account (default)"
    menu_options+=("default")
    ((i++))

    # Add account options
    for account in "${accounts[@]}"; do
        if [ -n "$account" ]; then
            draw_line "$i) $account"
            menu_options+=("$account")
            ((i++))
        fi
    done
    draw_empty_line
    draw_line "b) Back to MCP tools menu"
    draw_empty_line
    draw_bottom_border "Written By Claude Code For Claude Code"
    printf " Press a key (1-$((i-1)), b, first letter, Enter for Default, ESC): "
    read -n1 -s choice
    echo # Add newline after input

    # Handle ESC or back option
    if [[ "$choice" = $'\x1b' ]] || [[ "$choice" = "B" || "$choice" = "b" ]]; then
        clear
        show_mcp_menu "$@"
        return
    fi

    # Handle enter key (same as option 1 - default profile)
    if [[ "$choice" = "" ]]; then
        choice="1"
    fi

    # Handle first letter matching
    local selected=""
    local choice_upper=$(echo "$choice" | tr '[:lower:]' '[:upper:]')
    local default_first_letter=$(echo "$default_account" | cut -c1 | tr '[:lower:]' '[:upper:]')

    # Check default account first letter
    if [[ "$choice_upper" = "$default_first_letter" ]]; then
        selected="default"
    else
        # Check accounts from settings for first letter match
        for account in "${menu_options[@]}"; do
            if [ "$account" != "default" ]; then
                local first_letter=$(echo "$account" | cut -c1 | tr '[:lower:]' '[:upper:]')
                if [[ "$choice_upper" = "$first_letter" ]]; then
                    selected="$account"
                    break
                fi
            fi
        done
    fi

    # If no letter match found, try numeric choice
    if [ -z "$selected" ] && [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le $((i-1)) ]; then
        selected="${menu_options[$((choice-1))]}"
    fi

    # Show scope selection with selected profile
    if [ -n "$selected" ]; then
        clear
        if [ "$selected" = "default" ]; then
            show_scope_selection_for_mcp "$mcp_tool" "$mcp_command" "$default_account (default)" "default" "$@"
        else
            show_scope_selection_for_mcp "$mcp_tool" "$mcp_command" "$selected" "$selected" "$@"
        fi
    else
        echo "Invalid selection. Please try again."
        sleep 2
        clear
        show_profile_selection_for_mcp "$mcp_tool" "$mcp_command" "$@"
    fi
}

# Function to show scope selection for MCP installation
show_scope_selection_for_mcp() {
    local mcp_tool="$1"
    local mcp_command="$2"
    local profile_display="$3"
    local profile="$4"
    shift 4

    draw_top_border "${ORANGE}*${NC} ${WHITE}Asterisk${NC} v${VERSION}"
    draw_empty_line
    draw_line "${WHITE}Install $mcp_tool for: $profile_display${NC}"
    draw_line "${WHITE}==============================================${NC}"
    draw_empty_line
    draw_line "${WHITE}Select installation scope:${NC}"
    draw_empty_line
    draw_line "1) This project only (local scope)"
    draw_line "2) All projects using this profile (user scope)"
    draw_empty_line
    draw_line "b) Back to profile selection"
    draw_empty_line
    draw_bottom_border "Written By Claude Code For Claude Code"
    printf " Press a key (1-2, b, ESC): "
    read -n1 -s scope_choice
    echo # Add newline after input

    # Handle ESC or back option
    if [[ "$scope_choice" = $'\x1b' ]] || [[ "$scope_choice" = "B" || "$scope_choice" = "b" ]]; then
        clear
        show_profile_selection_for_mcp "$mcp_tool" "$mcp_command" "$@"
        return
    fi

    # Determine scope
    local scope=""
    local scope_display=""
    if [[ "$scope_choice" = "1" ]]; then
        scope="--scope local"
        scope_display="this project only"
    elif [[ "$scope_choice" = "2" ]]; then
        scope="--scope user"
        scope_display="all projects using this profile"
    else
        echo "Invalid selection. Please try again."
        sleep 2
        clear
        show_scope_selection_for_mcp "$mcp_tool" "$mcp_command" "$profile_display" "$profile" "$@"
        return
    fi

    # Execute the MCP installation with selected profile and scope
    clear
    if [ "$profile" = "default" ]; then
        echo "Installing $mcp_tool for $profile_display ($scope_display)..."
        echo "Running: claude mcp add $scope $mcp_command"
        echo ""
        env -u CLAUDE_CONFIG_DIR claude mcp add $scope $mcp_command
    else
        local config_dir="$ACCOUNTS_DIR/$profile"
        if [ ! -d "$config_dir" ]; then
            echo "Creating profile directory: $config_dir"
            mkdir -p "$config_dir"
        fi
        echo "Installing $mcp_tool for $profile ($scope_display)..."
        echo "Running: claude mcp add $scope $mcp_command"
        echo ""
        env CLAUDE_CONFIG_DIR="$config_dir" claude mcp add $scope $mcp_command
    fi

    # Automatically return to MCP tools menu
    echo ""
    show_mcp_menu "$@"
}

# Function to get list of installed MCP tools for a profile
get_mcp_tools_for_profile() {
    local profile="$1"

    if [ "$profile" = "default" ]; then
        env -u CLAUDE_CONFIG_DIR claude mcp list 2>/dev/null
    else
        local config_dir="$ACCOUNTS_DIR/$profile"
        env CLAUDE_CONFIG_DIR="$config_dir" claude mcp list 2>/dev/null
    fi
}

# Function to show profile selection for MCP removal
show_profile_selection_for_mcp_removal() {
    draw_top_border "${ORANGE}*${NC} ${WHITE}Asterisk${NC} v${VERSION}"
    draw_empty_line
    draw_line "${WHITE}Select Profile to Remove MCP Tool From${NC}"
    draw_line "${WHITE}==============================================${NC}"
    draw_empty_line

    local default_account=$(get_default_account_name)
    local accounts=($(get_account_names))
    local menu_options=()
    local i=1

    # Add default account option first
    draw_line "$i) $default_account (default)"
    menu_options+=("default")
    ((i++))

    # Add account options
    for account in "${accounts[@]}"; do
        if [ -n "$account" ]; then
            draw_line "$i) $account"
            menu_options+=("$account")
            ((i++))
        fi
    done
    draw_empty_line
    draw_line "b) Back to MCP tools menu"
    draw_empty_line
    draw_bottom_border "Written By Claude Code For Claude Code"
    printf " Press a key (1-$((i-1)), b, first letter, Enter for Default, ESC): "
    read -n1 -s choice
    echo # Add newline after input

    # Handle ESC or back option
    if [[ "$choice" = $'\x1b' ]] || [[ "$choice" = "B" || "$choice" = "b" ]]; then
        clear
        show_mcp_menu "$@"
        return
    fi

    # Handle enter key (same as option 1 - default profile)
    if [[ "$choice" = "" ]]; then
        choice="1"
    fi

    # Handle first letter matching
    local selected=""
    local choice_upper=$(echo "$choice" | tr '[:lower:]' '[:upper:]')
    local default_first_letter=$(echo "$default_account" | cut -c1 | tr '[:lower:]' '[:upper:]')

    # Check default account first letter
    if [[ "$choice_upper" = "$default_first_letter" ]]; then
        selected="default"
    else
        # Check accounts from settings for first letter match
        for account in "${menu_options[@]}"; do
            if [ "$account" != "default" ]; then
                local first_letter=$(echo "$account" | cut -c1 | tr '[:lower:]' '[:upper:]')
                if [[ "$choice_upper" = "$first_letter" ]]; then
                    selected="$account"
                    break
                fi
            fi
        done
    fi

    # If no letter match found, try numeric choice
    if [ -z "$selected" ] && [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le $((i-1)) ]; then
        selected="${menu_options[$((choice-1))]}"
    fi

    # Show MCP tool list for selected profile
    if [ -n "$selected" ]; then
        clear
        if [ "$selected" = "default" ]; then
            show_mcp_removal_menu "$default_account (default)" "default" "$@"
        else
            show_mcp_removal_menu "$selected" "$selected" "$@"
        fi
    else
        echo "Invalid selection. Please try again."
        sleep 2
        clear
        show_profile_selection_for_mcp_removal "$@"
    fi
}

# Function to show MCP tool removal menu for a specific profile
show_mcp_removal_menu() {
    local profile_display="$1"
    local profile="$2"
    shift 2

    draw_top_border "${ORANGE}*${NC} ${WHITE}Asterisk${NC} v${VERSION}"
    draw_empty_line
    draw_line "${WHITE}Remove MCP Tool from: $profile_display${NC}"
    draw_line "${WHITE}==============================================${NC}"
    draw_empty_line

    # Get list of installed MCP tools
    local mcp_list=$(get_mcp_tools_for_profile "$profile")

    if [ -z "$mcp_list" ]; then
        draw_line "${YELLOW}No MCP tools installed for this profile${NC}"
        draw_empty_line
        draw_line "b) Back to profile selection"
        draw_empty_line
        draw_bottom_border "Written By Claude Code For Claude Code"
        printf " Press a key (b, ESC): "
        read -n1 -s choice
        echo
        clear
        show_profile_selection_for_mcp_removal "$@"
        return
    fi

    # Parse MCP tool names from the list output
    local mcp_tools=()
    while IFS= read -r line; do
        # Skip empty lines, headers, status lines, and "No MCP" messages
        if [[ -n "$line" && ! "$line" =~ ^(Name|----|\s*$|Checking|No) ]]; then
            # Extract just the tool name (first word, remove trailing colon)
            local tool_name=$(echo "$line" | awk '{print $1}' | sed 's/:$//')
            if [ -n "$tool_name" ]; then
                mcp_tools+=("$tool_name")
            fi
        fi
    done <<< "$mcp_list"

    if [ ${#mcp_tools[@]} -eq 0 ]; then
        draw_line "${YELLOW}No MCP tools installed for this profile${NC}"
        draw_empty_line
        draw_line "b) Back to profile selection"
        draw_empty_line
        draw_bottom_border "Written By Claude Code For Claude Code"
        printf " Press a key (b, ESC): "
        read -n1 -s choice
        echo
        clear
        show_profile_selection_for_mcp_removal "$@"
        return
    fi

    # Display MCP tools
    local i=1
    for tool in "${mcp_tools[@]}"; do
        draw_line "$i) $tool"
        ((i++))
    done

    draw_empty_line
    draw_line "b) Back to profile selection"
    draw_empty_line
    draw_bottom_border "Written By Claude Code For Claude Code"
    printf " Press a key (1-${#mcp_tools[@]}, b, ESC): "
    read -n1 -s choice
    echo # Add newline after input

    # Handle ESC or back option
    if [[ "$choice" = $'\x1b' ]] || [[ "$choice" = "B" || "$choice" = "b" ]]; then
        clear
        show_profile_selection_for_mcp_removal "$@"
        return
    fi

    # Validate numeric choice
    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#mcp_tools[@]} ]; then
        local selected_tool="${mcp_tools[$((choice-1))]}"
        clear

        # Confirm removal
        echo "Are you sure you want to remove '$selected_tool' from $profile_display?"
        printf "Press 'y' to confirm, any other key to cancel: "
        read -n1 -s confirm
        echo
        echo

        if [[ "$confirm" = "Y" || "$confirm" = "y" ]]; then
            echo "Removing $selected_tool from $profile_display..."
            echo ""

            if [ "$profile" = "default" ]; then
                env -u CLAUDE_CONFIG_DIR claude mcp remove "$selected_tool"
            else
                local config_dir="$ACCOUNTS_DIR/$profile"
                env CLAUDE_CONFIG_DIR="$config_dir" claude mcp remove "$selected_tool"
            fi

            echo ""
            echo "${GREEN}MCP tool removed successfully!${NC}"
            sleep 2
        else
            echo "Removal cancelled."
            sleep 1
        fi

        # Return to MCP removal menu for same profile
        clear
        show_mcp_removal_menu "$profile_display" "$profile" "$@"
    else
        echo "Invalid selection. Please try again."
        sleep 2
        clear
        show_mcp_removal_menu "$profile_display" "$profile" "$@"
    fi
}


# Function to show account selection menu
show_menu() {
    # Check if we should run update check (only on first load, stored in global var)
    if [ "$FIRST_MENU_LOAD" = "true" ]; then
        FIRST_MENU_LOAD="false"
        local new_version=$(check_for_updates)
        if [ -n "$new_version" ]; then
            UPDATE_AVAILABLE="true"
            NEW_VERSION="$new_version"
        fi
    fi

    draw_top_border "${ORANGE}*${NC} ${WHITE}Asterisk${NC} v${VERSION}"
    draw_empty_line
    draw_line "${WHITE}Select a profile to launch the Claude Code CLI${NC}"
    draw_line "${WHITE}==============================================${NC}"
    draw_empty_line

    local default_account=$(get_default_account_name)
    local accounts=($(get_account_names))
    local menu_options=()
    local i=1

    # Add default account option first
    draw_line "$i) $default_account (default)"
    menu_options+=("default")
    ((i++))

    # Add account options
    for account in "${accounts[@]}"; do
        if [ -n "$account" ]; then
            draw_line "$i) $account"
            menu_options+=("$account")
            ((i++))
        fi
    done
    draw_empty_line

    # Add update option if available
    if [ "$UPDATE_AVAILABLE" = "true" ]; then
        draw_line "${ORANGE}u) Update to latest version: v${NEW_VERSION}${NC}"
    fi

    # Add edit settings option
    draw_line "e) Edit settings.json"

    # Add MCP tools option
    draw_line "m) Install MCP Tool"

    draw_empty_line
    draw_bottom_border "Written By Claude Code For Claude Code"
    if [ "$UPDATE_AVAILABLE" = "true" ]; then
        printf " Press a key (1-$((i-1)), u, e, m, first letter, Enter for Default, ESC to exit): "
    else
        printf " Press a key (1-$((i-1)), e, m, first letter, Enter for Default, ESC to exit): "
    fi
    # Read single character without requiring enter
    read -n1 -s choice
    echo # Add newline after input

    # Handle ESC (exit)
    if [[ "$choice" = $'\x1b' ]]; then
        clear
        exit 0
    fi

    # Handle update option (U or u)
    if [[ "$choice" = "U" || "$choice" = "u" ]]; then
        if [ "$UPDATE_AVAILABLE" = "true" ]; then
            clear
            echo "Updating Asterisk to v${NEW_VERSION}..."
            echo ""
            curl -fsSL https://raw.githubusercontent.com/juddflamm/asterisk/main/install.sh | sudo bash
            exit 0
        fi
    fi

    # Handle edit option (E or e)
    if [[ "$choice" = "E" || "$choice" = "e" ]]; then
        echo "Opening settings.json in new VSCode window..."
        code -n "$SETTINGS_FILE"
        exit 0
    fi

    # Handle MCP tools option (M or m)
    if [[ "$choice" = "M" || "$choice" = "m" ]]; then
        clear
        show_mcp_menu "$@"
        return
    fi
    
    # Handle enter key (same as option 1 - Personal)
    if [[ "$choice" = "" ]]; then
        choice="1"
    fi
    
    # Handle first letter matching
    local selected=""
    local choice_upper=$(echo "$choice" | tr '[:lower:]' '[:upper:]')
    local choice_lower=$(echo "$choice" | tr '[:upper:]' '[:lower:]')
    local default_first_letter=$(echo "$default_account" | cut -c1 | tr '[:lower:]' '[:upper:]')

    # Check default account first letter
    if [[ "$choice_upper" = "$default_first_letter" ]]; then
        selected="default"
    else
        # Check accounts from settings for first letter match
        for account in "${menu_options[@]}"; do
            if [ "$account" != "default" ]; then
                local first_letter=$(echo "$account" | cut -c1 | tr '[:lower:]' '[:upper:]')
                if [[ "$choice_upper" = "$first_letter" ]]; then
                    selected="$account"
                    break
                fi
            fi
        done
    fi
    
    # If no letter match found, try numeric choice
    if [ -z "$selected" ] && [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le $((i-1)) ]; then
        selected="${menu_options[$((choice-1))]}"
    fi
    
    # Execute the selection
    if [ -n "$selected" ]; then
        clear
        if [ "$selected" = "default" ]; then
            echo "Launching Claude Code CLI with $default_account profile..."
            echo "Command: env -u CLAUDE_CONFIG_DIR claude $@"
            echo ""
            exec env -u CLAUDE_CONFIG_DIR claude "$@"
        else
            local config_dir="$ACCOUNTS_DIR/$selected"
            if [ ! -d "$config_dir" ]; then
                echo "Creating profile directory: $config_dir"
                mkdir -p "$config_dir"
            fi
            echo "Launching Claude Code CLI with $selected profile..."
            echo "Command: env CLAUDE_CONFIG_DIR=\"$config_dir\" claude $@"
            echo ""
            exec env CLAUDE_CONFIG_DIR="$config_dir" claude "$@"
        fi
    else
        echo "Invalid selection. Please try again."
        exit 1
    fi
}

# Main execution
main() {
    # Check if accounts directory exists
    if [ ! -d "$ACCOUNTS_DIR" ]; then
        setup_accounts_dir
        echo ""
    fi

    # Check if settings file exists
    if [ ! -f "$SETTINGS_FILE" ]; then
        echo "Error: settings.json not found. Running setup..."
        setup_accounts_dir
        echo ""
    fi

    # Migrate settings if needed (old format to new format)
    migrate_settings_if_needed

    # Clear screen before showing first menu
    clear
    # Set flag for first menu load to check for updates
    FIRST_MENU_LOAD="true"
    # Show menu
    show_menu "$@"
}

# Run main function
main "$@"
